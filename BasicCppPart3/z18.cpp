/*
Задача 18. Люди стоят в очереди, но никогда не уходят из её начала, зато могут приходить в конец и уходить оттуда. 
Более того, иногда некоторые люди могут прекращать и начинать беспокоиться из-за того, 
что очередь не продвигается.
Будем считать, что люди в очереди нумеруются целыми числами, начиная с 0.
Реализуйте обработку следующих операций над очередью:
WORRY i: пометить i-го человека с начала очереди как беспокоящегося;
QUIET i: пометить i-го человека как успокоившегося;
COME k: добавить k спокойных человек в конец очереди;
COME -k: убрать k человек из конца очереди;
WORRY_COUNT: узнать количество беспокоящихся людей в очереди.
Изначально очередь пуста.
Формат ввода
Количество операций Q, затем описания операций.
Для каждой операции WORRY i и QUIET i гарантируется, что человек с номером i существует в очереди на момент операции.
Для каждой операции COME -k гарантируется, что k не больше текущего размера очереди.
*/

#include <iostream>
#include <vector>
using namespace std;

void z18() {
	setlocale(LC_ALL, "");
	// Количество ожидаемых команд, текущая команда.
	int n, k = 0;
	// Последовательность людей в очереди. Значение true - спокойный человек, false - обеспокоенный.
	vector<bool> peoples;
	// Флаг ввода непредусмотренной команды.
	bool hasErrorCommand = false;
	cin >> n;
	while (k != n) {
		k++;
		// Введенная команда.
		string command;
		cin >> command;
		if (command == "WORRY") {
			// Положение в очереди обеспокоенного человека.
			int worriedMan;
			cin >> worriedMan;
			peoples[worriedMan] = false;
		}
		else if (command == "QUIET") {
			// Положение в очереди спокойного человека.
			int calmMan;
			cin >> calmMan;
			peoples[calmMan] = true;
		}
		else if (command == "COME") {
			// Количество пришедших (ушедших) людей.
			int newPeoples;
			cin >> newPeoples;
			peoples.resize(peoples.size() + newPeoples, true);
		}
		else if (command == "WORRY_COUNT") {
			// Число обеспокоенных людей.
			int worriedCount = 0;
			for (auto man : peoples) {
				if (!man) {
					worriedCount++;
				}
			}
			cout << "Число обеспокоенных людей в очереди " << worriedCount << endl;
		}
		else {
			hasErrorCommand = true;
		}
	}
	// Если в потоке ввода обнаружена недопустимая команда.
	if (hasErrorCommand) {
		cout << "Была введена недопустимая команда\n";
	}
}